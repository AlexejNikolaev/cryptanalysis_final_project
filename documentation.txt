Crypto Analytic Platform
========================
1. Введение
------------

В последние годы криптовалюта стала одним из самых привлекательных классов активов для инвесторов. Резкий рост цен на Биткоин и другие криптовалюты в 2017 году привлек внимание широкой публики к этой новой технологии.
С тех пор рынок криптовалют претерпел значительные изменения, но интерес к инвестициям в эту область остается высоким.

В рамках данного проекта рассматриваются открытые данные о инвестичиях в различные криптовалютные проекты
Ссылка на streamlit: http://95.163.223.37:8501/

2. Установка и настройка
-------------------------

Требования:
- Python 3.11
- PostgreSQL

Установка:
a. Клонируйте репозиторий:
   

b. Установите необходимые зависимости:
   
   pip install -r requirements.txt
   

c. Создайте файл .env в корневой директории проекта и добавьте следующие переменные:
   
   DB_USER=<ваш пользователь базы данных>
   DB_PASSWORD=<ваш пароль базы данных>
   DB_HOST=<хост базы данных>
   DB_PORT=<порт базы данных>
   DB_NAME=<имя базы данных>
   

d. Запустите приложение Streamlit:
   
   streamlit run streamlit.py
   

3. Описание структуры проекта
------------------------------

C:.
│   .env
│   docker-compose.yml
│   final_project.ipynb
│   requirements.txt
│   streamlit.py
│
├───Blocks
│   │   __init__.py
│   │
│   ├───ClusteringBlockModule
│   │   │   ClusteringBlock.py
│   │   │   __init__.py
│   │
│   ├───GroupInvestorBlockModule
│   │   │   GroupInvestorBlock.py
│   │   │   __init__.py
│   │
│   ├───InvestorBlockModule
│   │   │   InvestorBlock.py
│   │   │   __init__.py
│   │
│   ├───MapBlockModule
│   │   │   MapBlock.py
│   │   │   __init__.py
│   │
│   ├───PreditionBlockModule
│   │   │   PredictionBlock.py
│   │   │   __init__.py
│   │
│   ├───ProjectInvestorBlockModule
│   │   │   ProjectInvestorBlock.py
│   │   │   __init__.py
│   │
│   ├───RoundBlockModule
│   │   │   RoundBlock.py
│   │   │   __init__.py
│   │
│   └───__pycache__
│
└───__pycache__

4. Описание классов и модулей

StreamlitApp
===============
Класс StreamlitApp отвечает за инициализацию и запуск приложения Streamlit. Он включает методы для добавления блоков анализа и их рендеринга.

ClusteringBlock
===============
Класс ClusteringBlock отвечает за загрузку данных, предварительную обработку и выполнение кластеризации. Он включает следующие методы:

- __init__(self, db_engine): Инициализирует объект ClusteringBlock и загружает данные из базы данных.
- load_data(self): Загружает данные из базы данных с помощью SQL-запроса.
- preprocess_data(self): Выполняет предварительную обработку данных, удаляя пустые значения.
- render(self): Отображает интерфейс Streamlit для выбора количества кластеров и запуска кластеризации.

Методы:

- __init__(self, db_engine): Конструктор класса, инициализирует объект ClusteringBlock и загружает данные из базы данных.
- load_data(self): Загружает данные из базы данных с помощью SQL-запроса.
- preprocess_data(self): Выполняет предварительную обработку данных, удаляя пустые значения.
- render(self): Отображает интерфейс Streamlit для выбора количества кластеров и запуска кластеризации.

GroupInvestorBlock
==================
Класс GroupInvestorBlock отвечает за загрузку данных, фильтрацию и визуализацию.

методы:

- __init__(self, engine): Инициализирует объект GroupInvestorBlock и загружает данные из базы данных.
- load_data(self, query): Загружает данные из базы данных с помощью SQL-запроса.
- filter_data(self): Фильтрует данные на основе выбранных инвесторов.
- display_data(self): Отображает отфильтрованные данные в виде таблиц.
- combine_small_categories(self, data, threshold=5): Объединяет малые категории в одну категорию "Другие".
- group_data(self): Группирует данные по странам, стадиям и категориям проектов.
- create_annotated_pie(self, ax, data, title, labels): Создает круговую диаграмму с аннотациями.
- plot_data(self): Визуализирует данные в виде круговых диаграмм.
- render(self): Отображает интерфейс Streamlit для фильтрации данных и визуализации.

InvestorBlock
=============
Класс InvestorBlock отвечает за загрузку данных, фильтрацию и визуализацию.

методы:

- __init__(self, engine): Инициализирует объект InvestorBlock и загружает данные из базы данных.
- load_data(self): Загружает данные из базы данных с помощью SQL-запроса.
- create_filters(self): Создает фильтры для данных инвесторов.
- apply_filters(self, filters): Применяет фильтры к данным инвесторов.
- display_dataframe(self, filtered_data): Отображает отфильтрованные данные в виде таблицы.
- plot_pie_charts(self, filtered_data): Визуализирует данные в виде круговых диаграмм.
- plot_pie_chart(self, ax, data, column, title, threshold_percentage=5): Создает круговую диаграмму для указанного столбца данных.
- render(self): Отображает интерфейс Streamlit для фильтрации данных и визуализации.

MapBlock
========
Класс MapBlock отвечает за загрузку данных, геокодирование и визуализацию.

методы:

- __init__(self, engine): Инициализирует объект MapBlock, загружает данные из базы данных и инициализирует сессию SQLAlchemy.
- get_country_list(self): Загружает список стран и их координат из базы данных.
- get_country_coordinates(self, country_name): Возвращает координаты страны. Если координаты не найдены в базе данных, использует Geopy для получения координат и сохраняет их в базу данных.
- render(self): Отображает интерфейс Streamlit для фильтрации данных и визуализации карты.

PredictionBlock
===============
Класс PredictionBlock отвечает за загрузку данных, прогнозирование и визуализацию.

методы:

- __init__(self, engine): Инициализирует объект PredictionBlock и загружает данные из базы данных.
- load_data(self): Загружает данные из базы данных с помощью SQL-запроса и выполняет фильтрацию выбросов.
- render(self): Отображает интерфейс Streamlit для выбора параметров прогнозирования и визуализации результатов.
- predict(self, months_for_analysis, months_for_forecast, methods): Выполняет прогнозирование с использованием выбранных методов и возвращает прогнозы и метрики.

ProjectInvestorBlock
=====================
Класс ProjectInvestorBlock отвечает за загрузку данных, фильтрацию и визуализацию.

методы:

- __init__(self, engine): Инициализирует объект ProjectInvestorBlock и загружает данные из базы данных.
- load_data(self): Загружает данные из базы данных с помощью SQL-запроса.
- create_filters(self): Создает фильтры для данных инвесторов и проектов.
- filter_data(self, selected_countries, selected_stages): Применяет фильтры к данным инвесторов и проектов.
- display_dataframe(self, filtered_df): Отображает отфильтрованные данные в виде таблицы.
- plot_graph(self, filtered_df): Визуализирует связи между инвесторами и проектами в виде 3D-графа.
- render(self): Отображает интерфейс Streamlit для фильтрации данных и визуализации графа.

ProjectInvestorBlock
=====================
Класс ProjectInvestorBlock отвечает за загрузку данных, фильтрацию и визуализацию.

методы:

- __init__(self, engine): Инициализирует объект ProjectInvestorBlock и загружает данные из базы данных.
- load_data(self): Загружает данные из базы данных с помощью SQL-запроса.
- create_filters(self): Создает фильтры для данных инвесторов и проектов.
- filter_data(self, selected_countries, selected_stages): Применяет фильтры к данным инвесторов и проектов.
- display_dataframe(self, filtered_df): Отображает отфильтрованные данные в виде таблицы.
- plot_graph(self, filtered_df): Визуализирует связи между инвесторами и проектами в виде 3D-графа.
- render(self): Отображает интерфейс Streamlit для фильтрации данных и визуализации графа.

RoundBlock
==========
Класс RoundBlock отвечает за загрузку данных, фильтрацию и визуализацию.

методы:

- __init__(self, engine): Инициализирует объект RoundBlock и загружает данные из базы данных.
- load_data(self): Загружает данные из базы данных с помощью SQL-запроса.
- create_filters(self): Создает фильтры для данных раундов инвестиций.
- apply_filters(self, filters): Применяет фильтры к данным раундов инвестиций.
- display_dataframe(self, filtered_data): Отображает отфильтрованные данные в виде таблицы.
- plot_pie_charts(self, filtered_data): Визуализирует данные в виде круговых диаграмм.
- plot_pie_chart(self, ax, data, column, title, threshold_percentage=5): Создает круговую диаграмму для указанного столбца данных.
- render(self): Отображает интерфейс Streamlit для фильтрации данных и визуализации.